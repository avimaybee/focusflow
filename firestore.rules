rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // A user can only interact with their own document and subcollections.
    match /users/{userId} {
      allow get: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId
                    && request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['preferredPersona', 'favoritePrompts', 'lastLogin', 'isPremium']);
      allow delete: if false; // Users should not be able to delete their own account from the client.

      // Subcollections for user-specific data.
      match /chats/{chatId} {
        allow list, get, create, delete: if request.auth.uid == userId;
        // Allow updating only the 'title' of a chat.
        allow update: if request.auth.uid == userId && request.resource.data.keys().hasOnly(['title']);
      }
      
      match /chats/{chatId}/messages/{messageId} {
        allow list, get, create: if request.auth.uid == userId;
        allow update, delete: if false; // Messages are immutable.
      }

      // Rules for all generated content collections.
      match /{collectionId}/{docId} where collectionId in ['summaries', 'quizzes', 'flashcardSets', 'studyPlans', 'studySessions', 'goals'] {
          allow read, write: if request.auth.uid == userId;
      }
    }

    // Public summaries collection: Allow anyone to read, but disallow client writes for security.
    match /publicSummaries/{slug} {
      allow get: if true;
      allow list, write: if false;
    }

    // Prompt templates can be read by anyone.
    match /promptTemplates/{templateId} {
      allow get, list: if true;
      allow write: if false; // Disallow client writes.
    }

    // Personas can be read by anyone, but not written to by clients.
    match /personas/{personaId} {
        allow get, list: if true;
        allow write: if false; // THIS IS A CRITICAL SECURITY FIX.
    }
  }
}
